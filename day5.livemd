# Advent 2024 - Day 5

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])
```

## Setup

```elixir
input = Kino.Input.textarea("Please paste your input file")
```

```elixir
[rules, updates] = input |> Kino.Input.read() |> String.split("\n\n")

rules = rules
  |> String.split("\n")
  |> Enum.map(fn rule ->
    rule
    |> String.split("|")
    |> Enum.map(&(String.to_integer(&1)))
  end)

updates = updates
  |> String.split("\n")
  |> Enum.map(fn update ->
    update
    |> String.split(",")
    |> Enum.map(&(String.to_integer(&1)))
  end)
```

## Part 1

```elixir
rule_lookup = rules
  |> Enum.group_by(fn [a, _b] -> a end)
  |> Enum.map(fn {k, v} ->
    {k, v |> Enum.map(fn [_a, b] -> b end) |> MapSet.new()}
  end)
  |> Map.new()

check_valid = fn update ->
  update
  |> Enum.with_index()
  |> Enum.reduce_while(true, fn {num, index}, true ->
    {before_updates, _after_updates} = update |> Enum.split(index)

    if Enum.member?(Map.get(rule_lookup, before_update, []), num) do
      {:cont, true}
    else
      {:halt, {false, index}}
    end
  end)
end

for update <- updates do
  is_valid = check_valid.(update)

  if is_valid do
    Enum.at(update, floor(length(update) / 2))
  else
    nil
  end
end
|> Enum.filter(&(&1))
|> Enum.sum()
```

## Part 2

```elixir
for update <- updates do
  is_valid = check_valid.(update)

  if is_valid do
    nil
  else
    update
    IO.inspect(update)
  end
end
```
